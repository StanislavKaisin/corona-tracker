{"version":3,"sources":["components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","components/CovidCard/CovidCard.jsx","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","asserts/colors.js","components/CountryPicker/CountryPicker.jsx","components/StatesTable/StatesTable.tsx","components/AnaliticPanel/helpers/getG7StatesInfo.ts","components/AnaliticPanel/helpers/getUkraineNeighbours.ts","components/AnaliticPanel/AnaliticPanel.tsx","components/AnaliticPanel/helpers/getConfirmedToCountries.ts","components/AnaliticPanel/helpers/getMostAffected.ts","App.jsx","index.js","components/CovidCard/CovidCard.module.css","App.module.css","asserts/corona_header.png","components/Cards/Cards.module.css"],"names":["module","exports","covidCard","title","value","className","lastUpdate","Grid","container","spacing","justify","classesNames","styles","card","item","component","Card","xs","CardContent","Typography","color","gutterBottom","variant","start","end","duration","separator","Date","toDateString","Cards","data","confirmed","recovered","deaths","CovidCard","url","fetchData","a","country","changeableURL","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","fetchDailyDataByDate","dayAsMs","parse","dayForFetch","toLocaleDateString","dayAsArray","split","day","Array","join","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","fetchAPICountries","FormControl","formControl","NativeSelect","defaultValue","onChange","event","target","key","StyledTableCell","withStyles","theme","createStyles","head","palette","common","black","white","body","fontSize","TableCell","StyledTableRow","root","action","hover","TableRow","useStyles","makeStyles","table","minWidth","StatesTable","states","classes","TableContainer","Paper","Table","aria-label","TableHead","align","TableBody","state","countryRegion","scope","reduce","acc","G7","ukraineNeighbours","width","maxWidth","marginBottom","heading","typography","pxToRem","fontWeight","fontWeightRegular","AnaliticPanel","mostAffected","setMostAffected","G7States","setG7States","UkraineNeighbours","setUkraineNeighbours","then","confirmedToCountries","currentState","hasOwnProperty","getConfirmedToCountries","mostAffectedInfo","arrayOfStates","Object","values","sort","state1","state2","getMostAffected","G7StatesInfo","G7State","findedState","find","getG7StatesInfo","UkraineNeighboursInfo","UkraineNeighbour","getUkraineNeighbours","ExpansionPanel","ExpansionPanelSummary","expandIcon","aria-controls","id","ExpansionPanelDetails","App","fetchedData","setState","this","src","coronaHeader","alt","with","height","image","href","rel","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.69bdf110.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__Z07fp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2FLVu\"};","import React from \"react\";\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport styles from \"./CovidCard.module.css\";\r\nimport CountUp from \"react-countup\";\r\nimport classesNames from \"classnames\";\r\n\r\nconst covidCard = ( {title, value, className, lastUpdate}) => {\r\n  return (\r\n    <Grid\r\n      container\r\n      spacing={2}\r\n      justify=\"center\"\r\n      className={classesNames(styles.card, styles[className])}\r\n    >\r\n      <Grid item component={Card} xs={12}>\r\n        <CardContent>\r\n          <Typography color=\"textSecondary\" gutterBottom>\r\n            {title}\r\n          </Typography>\r\n          <Typography variant=\"h5\">\r\n            <CountUp\r\n              start={0}\r\n              end={value}\r\n              duration={2.1}\r\n              separator={\".\"}\r\n            />\r\n          </Typography>\r\n          <Typography color=\"textSecondary\">\r\n            {new Date(lastUpdate).toDateString()}\r\n          </Typography>\r\n          <Typography variant=\"body2\">\r\n            Number of active cases of COVID-19\r\n          </Typography>\r\n        </CardContent>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\nexport default covidCard;\r\n","import React from \"react\";\r\nimport styles from \"./Cards.module.css\";\r\n\r\nimport CovidCard from \"../CovidCard/CovidCard\"\r\n\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n  if (!confirmed) {\r\n    return \"Loading...\";\r\n  }\r\n  return (\r\n    <div className={styles.container}>\r\n      <CovidCard \r\n        title='Infected'\r\n        value={confirmed.value}\r\n        className={'infected'}\r\n        lastUpdate={lastUpdate}\r\n      />\r\n      <CovidCard \r\n        title='Deaths'\r\n        value={deaths.value}\r\n        className={'deaths'}\r\n        lastUpdate={lastUpdate}\r\n      />\r\n      <CovidCard \r\n        title='Recovered'\r\n        value={recovered.value}\r\n        className={'recovered'}\r\n        lastUpdate={lastUpdate}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default Cards;\r\n","import axios from \"axios\";\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (country = \"\") => {\r\n  let changeableURL = url;\r\n  if (country) {\r\n    changeableURL = `${url}/countries/${country}`;\r\n  }\r\n  try {\r\n    const {\r\n      data: { confirmed, recovered, deaths, lastUpdate },\r\n    } = await axios.get(changeableURL);\r\n    return {\r\n      confirmed,\r\n      recovered,\r\n      deaths,\r\n      lastUpdate,\r\n    };\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/daily`);\r\n    const modifiedData = data.map((dailyData) => ({\r\n      confirmed: dailyData.confirmed.total,\r\n      deaths: dailyData.deaths.total,\r\n      date: dailyData.reportDate,\r\n    }));\r\n    return modifiedData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const {\r\n      data: { countries },\r\n    } = await axios.get(`${url}/countries`);\r\n    return countries.map((country) => country.name);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\nexport const fetchDailyDataByDate = async (lastUpdate) => {\r\n  try {\r\n    const dayAsMs = Date.parse(lastUpdate) - 24 * 60 * 60 * 1000;\r\n    const dayForFetch = new Date(dayAsMs).toLocaleDateString();\r\n    const dayAsArray = dayForFetch.split(\".\");\r\n    const day = new Array(dayAsArray[1], dayAsArray[0], dayAsArray[2]).join(\r\n      \"-\"\r\n    );\r\n    const { data } = await axios.get(`${url}/daily/${day}`);\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { fetchDailyData } from \"../../api/index\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport styles from \"./Chart.module.css\";\r\nimport {\r\n  confirmedColor,\r\n  confirmedHexColor,\r\n  recoveredColor,\r\n  deathsColor,\r\n  deathsHexColor,\r\n} from \"../../asserts/colors\";\r\n\r\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n  const [dailyData, setDailyData] = useState([]);\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setDailyData(await fetchDailyData());\r\n    };\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  const lineChart = dailyData?.length ? (\r\n    <Line\r\n      data={{\r\n        labels: dailyData.map(({ date }) => date),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map(({ confirmed }) => confirmed),\r\n            label: \"Infected\",\r\n            borderColor: confirmedHexColor,\r\n            // backgroundColor: confirmedColor,\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map(({ deaths }) => deaths),\r\n            label: \"Deaths\",\r\n            borderColor: deathsHexColor,\r\n            backgroundColor: deathsColor,\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  const barChart = confirmed ? (\r\n    <Bar\r\n      data={{\r\n        labels: [\"Infected\", \"Deaths\", \"Recovered\"],\r\n        datasets: [\r\n          {\r\n            label: \"People\",\r\n            backgroundColor: [confirmedColor, deathsColor, recoveredColor],\r\n            data: [confirmed.value, deaths.value, recovered.value],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: false },\r\n        title: { display: true, text: `Current state in ${country}` },\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  return (\r\n    <div className={styles.container}>{country ? barChart : lineChart}</div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","export const confirmedColor = 'rgba(255, 136, 0, 0.5)'\r\nexport const confirmedHexColor = '#ff8800'\r\nexport const deathsColor = 'rgba(255, 0, 0, 0.5)'\r\nexport const deathsHexColor = '#ff0000'\r\nexport const recoveredColor = 'rgba(0, 255, 0, 0.5)'","import React, { useState, useEffect } from \"react\";\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\nimport styles from \"./CountryPicker.module.css\";\r\nimport { fetchCountries } from \"./../../api/index\";\r\n\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n  const [fetchedCountries, setFetchedCountries] = useState([]);\r\n  useEffect(() => {\r\n    const fetchAPICountries = async () => {\r\n      setFetchedCountries(await fetchCountries());\r\n    };\r\n    fetchAPICountries();\r\n    return () => {\r\n      //cleanup\r\n    };\r\n  }, [setFetchedCountries]);\r\n  return (\r\n    <FormControl className={styles.formControl}>\r\n      <NativeSelect\r\n        defaultValue=\"\"\r\n        onChange={(event) => {\r\n          handleCountryChange(\r\n            event.target.value === \"global\" ? \"\" : event.target.value\r\n          );\r\n        }}\r\n      >\r\n        <option value=\"global\">Select state</option>\r\n        {fetchedCountries.map((country) => (\r\n          <option value={country} key={country}>\r\n            {country}\r\n          </option>\r\n        ))}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default CountryPicker;\r\n","import React from \"react\";\r\nimport {\r\n  withStyles,\r\n  Theme,\r\n  createStyles,\r\n  makeStyles,\r\n} from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nimport CountUp from \"react-countup\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport { State } from \"../../interfaces/State\";\r\n\r\nconst StyledTableCell = withStyles((theme: Theme) =>\r\n  createStyles({\r\n    head: {\r\n      backgroundColor: theme.palette.common.black,\r\n      color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n      fontSize: \"1rem\",\r\n    },\r\n  })\r\n)(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      \"&:nth-of-type(odd)\": {\r\n        backgroundColor: theme.palette.action.hover,\r\n      },\r\n    },\r\n  })\r\n)(TableRow);\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 280,\r\n  },\r\n});\r\n\r\ninterface StatesTableProps {\r\n  states: (State | undefined)[];\r\n}\r\n\r\nexport default function StatesTable({ states }: StatesTableProps) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table className={classes.table} aria-label=\"customized table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <StyledTableCell>State</StyledTableCell>\r\n            <StyledTableCell align=\"right\">Deaths</StyledTableCell>\r\n            <StyledTableCell align=\"right\">Confirmed</StyledTableCell>\r\n            <StyledTableCell align=\"right\">Recovered</StyledTableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {states?.map((state) => (\r\n            <StyledTableRow key={state?.countryRegion}>\r\n              <StyledTableCell component=\"th\" scope=\"row\">\r\n                {state?.countryRegion}\r\n              </StyledTableCell>\r\n              <StyledTableCell align=\"right\">\r\n                <Typography>\r\n                  <CountUp\r\n                    start={0}\r\n                    end={state ? +state.deaths : 0}\r\n                    duration={2.1}\r\n                    separator={\".\"}\r\n                  />\r\n                </Typography>\r\n              </StyledTableCell>\r\n              <StyledTableCell align=\"right\">\r\n                <Typography>\r\n                  <CountUp\r\n                    start={0}\r\n                    end={state ? +state?.confirmed : 0}\r\n                    duration={2.1}\r\n                    separator={\".\"}\r\n                  />\r\n                </Typography>\r\n              </StyledTableCell>\r\n              <StyledTableCell align=\"right\">\r\n                <Typography>\r\n                  <CountUp\r\n                    start={0}\r\n                    end={state ? +state?.recovered : 0}\r\n                    duration={2.1}\r\n                    separator={\".\"}\r\n                  />\r\n                </Typography>\r\n              </StyledTableCell>\r\n            </StyledTableRow>\r\n          ))}\r\n        </TableBody>\r\n        <TableHead>\r\n          <TableRow>\r\n            <StyledTableCell>Total</StyledTableCell>\r\n            <StyledTableCell align=\"right\">\r\n              <Typography>\r\n                <CountUp\r\n                  start={0}\r\n                  end={states?.reduce((acc, state) => {\r\n                    return (acc += state ? +state?.deaths : 0);\r\n                  }, 0)}\r\n                  duration={2.1}\r\n                  separator={\".\"}\r\n                />\r\n              </Typography>\r\n            </StyledTableCell>\r\n            <StyledTableCell align=\"right\">\r\n              <Typography>\r\n                <CountUp\r\n                  start={0}\r\n                  end={states?.reduce((acc, state) => {\r\n                    return (acc += state ? +state?.confirmed : 0);\r\n                  }, 0)}\r\n                  duration={2.1}\r\n                  separator={\".\"}\r\n                />\r\n              </Typography>\r\n            </StyledTableCell>\r\n            <StyledTableCell align=\"right\">\r\n              <Typography>\r\n                <CountUp\r\n                  start={0}\r\n                  end={states?.reduce((acc, state) => {\r\n                    return (acc += state ? +state?.recovered : 0);\r\n                  }, 0)}\r\n                  duration={2.1}\r\n                  separator={\".\"}\r\n                />\r\n              </Typography>\r\n            </StyledTableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n","import { State } from \"../../../interfaces/State\";\r\ntype StatesObject = { [key: string]: State };\r\n\r\nconst G7 = [\r\n  \"US\",\r\n  \"Japan\",\r\n  \"Germany\",\r\n  \"France\",\r\n  \"United Kingdom\",\r\n  \"Italy\",\r\n  \"Canada\",\r\n  \"China\",\r\n];\r\n\r\nexport const getG7StatesInfo = (states: StatesObject) => {\r\n  const arrayOfStates = Object.values(states);\r\n  const G7Local = [...G7];\r\n  const G7LocalWithInfo = G7Local.map((G7State) => {\r\n    const findedState = arrayOfStates.find((state) => {\r\n      if (state.countryRegion === G7State) {\r\n        return state;\r\n      }\r\n    });\r\n    if (findedState) return findedState;\r\n  });\r\n  return G7LocalWithInfo;\r\n};\r\n","import { State } from \"../../../interfaces/State\";\r\ntype StatesObject = { [key: string]: State };\r\n\r\nconst ukraineNeighbours = [\r\n  \"Ukraine\",\r\n  \"Poland\",\r\n  \"Slovakia\",\r\n  \"Hungary\",\r\n  \"Romania\",\r\n  \"Turkey\",\r\n  \"Moldova\",\r\n  \"Belarus\",\r\n  \"Russia\",\r\n];\r\n\r\nexport const getUkraineNeighbours = (states: StatesObject) => {\r\n  const arrayOfStates = Object.values(states);\r\n  const UkraineNeighboursLocalWithInfo = ukraineNeighbours.map(\r\n    (UkraineNeighbour) => {\r\n      const findedState = arrayOfStates.find((state) => {\r\n        if (state.countryRegion === UkraineNeighbour) {\r\n          return state;\r\n        }\r\n      });\r\n      return findedState;\r\n    }\r\n  );\r\n  return UkraineNeighboursLocalWithInfo;\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\r\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\r\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport StatesTable from \"../StatesTable/StatesTable\";\r\nimport { fetchDailyDataByDate } from \"../../api\";\r\nimport { State } from \"../../interfaces/State\";\r\nimport { getG7StatesInfo } from \"./helpers/getG7StatesInfo\";\r\nimport { getUkraineNeighbours } from \"./helpers/getUkraineNeighbours\";\r\nimport { getMostAffected } from \"./helpers/getMostAffected\";\r\nimport { getConfirmedToCountries } from \"./helpers/getConfirmedToCountries\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    maxWidth: 820,\r\n    marginBottom: \"1rem\",\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n  },\r\n}));\r\n\r\ninterface AnaliticPanelProps {\r\n  confirmed?: State[];\r\n  lastUpdate?: string;\r\n}\r\n\r\nconst AnaliticPanel = ({ lastUpdate }: AnaliticPanelProps) => {\r\n  const classes = useStyles();\r\n  const [mostAffected, setMostAffected] = useState<State[]>([]);\r\n  const [G7States, setG7States] = useState<(State | undefined)[]>([]);\r\n  const [UkraineNeighbours, setUkraineNeighbours] = useState<\r\n    (State | undefined)[]\r\n  >([]);\r\n\r\n  useEffect(() => {\r\n    if (lastUpdate) {\r\n      fetchDailyDataByDate(lastUpdate).then((confirmed: State[]) => {\r\n        //getConfirmedToCountries\r\n        const confirmedToCountries = getConfirmedToCountries(confirmed);\r\n\r\n        const mostAffectedInfo = getMostAffected(confirmedToCountries);\r\n        setMostAffected(mostAffectedInfo);\r\n\r\n        const G7StatesInfo = getG7StatesInfo(confirmedToCountries);\r\n        setG7States(G7StatesInfo);\r\n\r\n        const UkraineNeighboursInfo = getUkraineNeighbours(\r\n          confirmedToCountries\r\n        );\r\n        setUkraineNeighbours(UkraineNeighboursInfo);\r\n      });\r\n    }\r\n  }, [lastUpdate]);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <ExpansionPanel>\r\n        <ExpansionPanelSummary\r\n          expandIcon={<ExpandMoreIcon />}\r\n          aria-controls=\"panel1a-content\"\r\n          id=\"panel1a-header\"\r\n        >\r\n          <Typography className={classes.heading}>Most affected</Typography>\r\n        </ExpansionPanelSummary>\r\n        <ExpansionPanelDetails>\r\n          <StatesTable states={mostAffected} />\r\n        </ExpansionPanelDetails>\r\n      </ExpansionPanel>\r\n\r\n      <ExpansionPanel>\r\n        <ExpansionPanelSummary\r\n          expandIcon={<ExpandMoreIcon />}\r\n          aria-controls=\"panel2a-content\"\r\n          id=\"panel2a-header\"\r\n        >\r\n          <Typography className={classes.heading}>G7 Countries</Typography>\r\n        </ExpansionPanelSummary>\r\n        <ExpansionPanelDetails>\r\n          <StatesTable states={G7States} />\r\n        </ExpansionPanelDetails>\r\n      </ExpansionPanel>\r\n\r\n      <ExpansionPanel>\r\n        <ExpansionPanelSummary\r\n          expandIcon={<ExpandMoreIcon />}\r\n          aria-controls=\"panel2a-content\"\r\n          id=\"panel2a-header\"\r\n        >\r\n          <Typography className={classes.heading}>\r\n            Ukraine&Neighbours\r\n          </Typography>\r\n        </ExpansionPanelSummary>\r\n        <ExpansionPanelDetails>\r\n          <StatesTable states={UkraineNeighbours} />\r\n        </ExpansionPanelDetails>\r\n      </ExpansionPanel>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AnaliticPanel;\r\n","import { State } from \"../../../interfaces/State\";\r\ntype StatesObject = { [key: string]: State };\r\n\r\nexport const getConfirmedToCountries = (confirmed: State[]) =>\r\n  confirmed.reduce<StatesObject>((states, currentState) => {\r\n    if (!states.hasOwnProperty(currentState!.countryRegion)) {\r\n      states[currentState!.countryRegion] = {\r\n        countryRegion: currentState!.countryRegion,\r\n        confirmed: currentState!.confirmed,\r\n        deaths: currentState!.deaths,\r\n        recovered: currentState!.recovered,\r\n      };\r\n    }\r\n    states[currentState!.countryRegion].confirmed =\r\n      +states[currentState!.countryRegion].confirmed + +currentState!.confirmed;\r\n\r\n    states[currentState!.countryRegion].deaths =\r\n      +states[currentState!.countryRegion].deaths + +currentState!.deaths;\r\n\r\n    states[currentState!.countryRegion].recovered =\r\n      +states[currentState!.countryRegion].recovered + +currentState!.recovered;\r\n\r\n    return states;\r\n  }, {});\r\n","import { State } from \"../../../interfaces/State\";\r\ntype StatesObject = { [key: string]: State };\r\n\r\nexport const getMostAffected = (states: StatesObject) => {\r\n  const arrayOfStates = Object.values(states);\r\n  arrayOfStates.sort((state1, state2) => +state2.confirmed - +state1.confirmed);\r\n  const mostAffected = [\r\n    arrayOfStates[0],\r\n    arrayOfStates[1],\r\n    arrayOfStates[2],\r\n    arrayOfStates[3],\r\n    arrayOfStates[4],\r\n    arrayOfStates[6],\r\n    arrayOfStates[7],\r\n  ];\r\n  return mostAffected;\r\n};\r\n","import React, { Component } from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport coronaHeader from \"./asserts/corona_header.png\";\r\n\r\nimport { Cards, Chart, CountryPicker, AnaliticPanel } from \"./components\";\r\nimport styles from \"./App.module.css\";\r\nimport { fetchData } from \"./api/index.js\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    data: {},\r\n    country: \"\",\r\n  };\r\n  async componentDidMount() {\r\n    const fetchedData = await fetchData();\r\n    this.setState({ data: fetchedData });\r\n  }\r\n  handleCountryChange = async (country) => {\r\n    const fetchedData = await fetchData(country);\r\n    this.setState({ data: fetchedData, country: country });\r\n  };\r\n\r\n  render() {\r\n    const { data, country } = this.state;\r\n    const lastUpdate = this.state.data?.lastUpdate;\r\n    return (\r\n      <div className={styles.container}>\r\n        <img\r\n          src={coronaHeader}\r\n          alt=\"COVID-19\"\r\n          with={300}\r\n          height={72}\r\n          className={styles.image}\r\n        />\r\n        <Cards data={data} />\r\n        <AnaliticPanel lastUpdate={lastUpdate} />\r\n        <Typography\r\n          variant=\"caption\"\r\n          color=\"textSecondary\"\r\n          styles={{ marginBottom: \"2rem\" }}\r\n        >\r\n          Data by{\" \"}\r\n          <a\r\n            href=\"https://github.com/mathdroid/covid-19-api\"\r\n            rel=\"noreferrer noopener\"\r\n            target=\"_blank\"\r\n          >\r\n            https://github.com/mathdroid/covid-19-api\r\n          </a>\r\n        </Typography>\r\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\r\n        <Chart data={data} country={country} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App.jsx\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"CovidCard_card__3ZQZR\",\"infected\":\"CovidCard_infected__n02Jy\",\"recovered\":\"CovidCard_recovered__31Vgl\",\"deaths\":\"CovidCard_deaths__1cPQc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__20N7P\",\"image\":\"App_image__9ZFU_\"};","module.exports = __webpack_public_path__ + \"static/media/corona_header.d7265326.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__1piWD\"};"],"sourceRoot":""}